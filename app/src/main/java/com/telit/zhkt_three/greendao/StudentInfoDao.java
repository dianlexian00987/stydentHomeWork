package com.telit.zhkt_three.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.telit.zhkt_three.JavaBean.StudentInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STUDENT_INFO".
*/
public class StudentInfoDao extends AbstractDao<StudentInfo, String> {

    public static final String TABLENAME = "STUDENT_INFO";

    /**
     * Properties of entity StudentInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property StudentId = new Property(0, String.class, "studentId", false, "STUDENT_ID");
        public final static Property SchoolId = new Property(1, String.class, "schoolId", false, "SCHOOL_ID");
        public final static Property UserId = new Property(2, String.class, "userId", true, "USER_ID");
        public final static Property GradeId = new Property(3, String.class, "gradeId", false, "GRADE_ID");
        public final static Property ClassId = new Property(4, String.class, "classId", false, "CLASS_ID");
        public final static Property StudentName = new Property(5, String.class, "studentName", false, "STUDENT_NAME");
        public final static Property DateOfBirth = new Property(6, String.class, "dateOfBirth", false, "DATE_OF_BIRTH");
        public final static Property Sex = new Property(7, String.class, "sex", false, "SEX");
        public final static Property Specialty = new Property(8, String.class, "specialty", false, "SPECIALTY");
        public final static Property Remark = new Property(9, String.class, "remark", false, "REMARK");
        public final static Property GradeName = new Property(10, String.class, "gradeName", false, "GRADE_NAME");
        public final static Property ClassName = new Property(11, String.class, "className", false, "CLASS_NAME");
        public final static Property Photo = new Property(12, String.class, "photo", false, "PHOTO");
        public final static Property SchoolName = new Property(13, String.class, "schoolName", false, "SCHOOL_NAME");
        public final static Property LoginName = new Property(14, String.class, "loginName", false, "LOGIN_NAME");
        public final static Property Token = new Property(15, String.class, "token", false, "TOKEN");
        public final static Property ClassShortId = new Property(16, String.class, "classShortId", false, "CLASS_SHORT_ID");
    }


    public StudentInfoDao(DaoConfig config) {
        super(config);
    }
    
    public StudentInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STUDENT_INFO\" (" + //
                "\"STUDENT_ID\" TEXT," + // 0: studentId
                "\"SCHOOL_ID\" TEXT," + // 1: schoolId
                "\"USER_ID\" TEXT PRIMARY KEY NOT NULL ," + // 2: userId
                "\"GRADE_ID\" TEXT," + // 3: gradeId
                "\"CLASS_ID\" TEXT," + // 4: classId
                "\"STUDENT_NAME\" TEXT," + // 5: studentName
                "\"DATE_OF_BIRTH\" TEXT," + // 6: dateOfBirth
                "\"SEX\" TEXT," + // 7: sex
                "\"SPECIALTY\" TEXT," + // 8: specialty
                "\"REMARK\" TEXT," + // 9: remark
                "\"GRADE_NAME\" TEXT," + // 10: gradeName
                "\"CLASS_NAME\" TEXT," + // 11: className
                "\"PHOTO\" TEXT," + // 12: photo
                "\"SCHOOL_NAME\" TEXT," + // 13: schoolName
                "\"LOGIN_NAME\" TEXT," + // 14: loginName
                "\"TOKEN\" TEXT," + // 15: token
                "\"CLASS_SHORT_ID\" TEXT);"); // 16: classShortId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STUDENT_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StudentInfo entity) {
        stmt.clearBindings();
 
        String studentId = entity.getStudentId();
        if (studentId != null) {
            stmt.bindString(1, studentId);
        }
 
        String schoolId = entity.getSchoolId();
        if (schoolId != null) {
            stmt.bindString(2, schoolId);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
 
        String gradeId = entity.getGradeId();
        if (gradeId != null) {
            stmt.bindString(4, gradeId);
        }
 
        String classId = entity.getClassId();
        if (classId != null) {
            stmt.bindString(5, classId);
        }
 
        String studentName = entity.getStudentName();
        if (studentName != null) {
            stmt.bindString(6, studentName);
        }
 
        String dateOfBirth = entity.getDateOfBirth();
        if (dateOfBirth != null) {
            stmt.bindString(7, dateOfBirth);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(8, sex);
        }
 
        String specialty = entity.getSpecialty();
        if (specialty != null) {
            stmt.bindString(9, specialty);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(10, remark);
        }
 
        String gradeName = entity.getGradeName();
        if (gradeName != null) {
            stmt.bindString(11, gradeName);
        }
 
        String className = entity.getClassName();
        if (className != null) {
            stmt.bindString(12, className);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(13, photo);
        }
 
        String schoolName = entity.getSchoolName();
        if (schoolName != null) {
            stmt.bindString(14, schoolName);
        }
 
        String loginName = entity.getLoginName();
        if (loginName != null) {
            stmt.bindString(15, loginName);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(16, token);
        }
 
        String classShortId = entity.getClassShortId();
        if (classShortId != null) {
            stmt.bindString(17, classShortId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StudentInfo entity) {
        stmt.clearBindings();
 
        String studentId = entity.getStudentId();
        if (studentId != null) {
            stmt.bindString(1, studentId);
        }
 
        String schoolId = entity.getSchoolId();
        if (schoolId != null) {
            stmt.bindString(2, schoolId);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
 
        String gradeId = entity.getGradeId();
        if (gradeId != null) {
            stmt.bindString(4, gradeId);
        }
 
        String classId = entity.getClassId();
        if (classId != null) {
            stmt.bindString(5, classId);
        }
 
        String studentName = entity.getStudentName();
        if (studentName != null) {
            stmt.bindString(6, studentName);
        }
 
        String dateOfBirth = entity.getDateOfBirth();
        if (dateOfBirth != null) {
            stmt.bindString(7, dateOfBirth);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(8, sex);
        }
 
        String specialty = entity.getSpecialty();
        if (specialty != null) {
            stmt.bindString(9, specialty);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(10, remark);
        }
 
        String gradeName = entity.getGradeName();
        if (gradeName != null) {
            stmt.bindString(11, gradeName);
        }
 
        String className = entity.getClassName();
        if (className != null) {
            stmt.bindString(12, className);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(13, photo);
        }
 
        String schoolName = entity.getSchoolName();
        if (schoolName != null) {
            stmt.bindString(14, schoolName);
        }
 
        String loginName = entity.getLoginName();
        if (loginName != null) {
            stmt.bindString(15, loginName);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(16, token);
        }
 
        String classShortId = entity.getClassShortId();
        if (classShortId != null) {
            stmt.bindString(17, classShortId);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2);
    }    

    @Override
    public StudentInfo readEntity(Cursor cursor, int offset) {
        StudentInfo entity = new StudentInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // studentId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // schoolId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // gradeId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // classId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // studentName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // dateOfBirth
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // sex
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // specialty
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // remark
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // gradeName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // className
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // photo
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // schoolName
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // loginName
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // token
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // classShortId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StudentInfo entity, int offset) {
        entity.setStudentId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSchoolId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGradeId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setClassId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStudentName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDateOfBirth(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSex(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSpecialty(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRemark(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setGradeName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setClassName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPhoto(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSchoolName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setLoginName(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setToken(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setClassShortId(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    @Override
    protected final String updateKeyAfterInsert(StudentInfo entity, long rowId) {
        return entity.getUserId();
    }
    
    @Override
    public String getKey(StudentInfo entity) {
        if(entity != null) {
            return entity.getUserId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StudentInfo entity) {
        return entity.getUserId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
