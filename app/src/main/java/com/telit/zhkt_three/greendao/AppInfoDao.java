package com.telit.zhkt_three.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.telit.zhkt_three.JavaBean.AppInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "APP_INFO".
*/
public class AppInfoDao extends AbstractDao<AppInfo, String> {

    public static final String TABLENAME = "APP_INFO";

    /**
     * Properties of entity AppInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property IsSystemApp = new Property(0, boolean.class, "isSystemApp", false, "IS_SYSTEM_APP");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property PackageName = new Property(2, String.class, "packageName", true, "PACKAGE_NAME");
        public final static Property OrderNum = new Property(3, int.class, "orderNum", false, "ORDER_NUM");
    }


    public AppInfoDao(DaoConfig config) {
        super(config);
    }
    
    public AppInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APP_INFO\" (" + //
                "\"IS_SYSTEM_APP\" INTEGER NOT NULL ," + // 0: isSystemApp
                "\"NAME\" TEXT," + // 1: name
                "\"PACKAGE_NAME\" TEXT PRIMARY KEY NOT NULL ," + // 2: packageName
                "\"ORDER_NUM\" INTEGER NOT NULL );"); // 3: orderNum
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APP_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AppInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getIsSystemApp() ? 1L: 0L);
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(3, packageName);
        }
        stmt.bindLong(4, entity.getOrderNum());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AppInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getIsSystemApp() ? 1L: 0L);
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(3, packageName);
        }
        stmt.bindLong(4, entity.getOrderNum());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2);
    }    

    @Override
    public AppInfo readEntity(Cursor cursor, int offset) {
        AppInfo entity = new AppInfo( //
            cursor.getShort(offset + 0) != 0, // isSystemApp
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // packageName
            cursor.getInt(offset + 3) // orderNum
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AppInfo entity, int offset) {
        entity.setIsSystemApp(cursor.getShort(offset + 0) != 0);
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPackageName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOrderNum(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(AppInfo entity, long rowId) {
        return entity.getPackageName();
    }
    
    @Override
    public String getKey(AppInfo entity) {
        if(entity != null) {
            return entity.getPackageName();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AppInfo entity) {
        return entity.getPackageName() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
