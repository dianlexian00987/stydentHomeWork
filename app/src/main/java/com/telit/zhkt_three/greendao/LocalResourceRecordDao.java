package com.telit.zhkt_three.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.telit.zhkt_three.JavaBean.Resource.LocalResourceRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCAL_RESOURCE_RECORD".
*/
public class LocalResourceRecordDao extends AbstractDao<LocalResourceRecord, String> {

    public static final String TABLENAME = "LOCAL_RESOURCE_RECORD";

    /**
     * Properties of entity LocalResourceRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ResourceType = new Property(0, String.class, "resourceType", false, "RESOURCE_TYPE");
        public final static Property ResourceId = new Property(1, String.class, "resourceId", true, "RESOURCE_ID");
        public final static Property ResourceFilePath = new Property(2, String.class, "resourceFilePath", false, "RESOURCE_FILE_PATH");
        public final static Property ResourceUpdateDate = new Property(3, String.class, "resourceUpdateDate", false, "RESOURCE_UPDATE_DATE");
        public final static Property ImageUrl = new Property(4, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property ResourceName = new Property(5, String.class, "resourceName", false, "RESOURCE_NAME");
        public final static Property CanChecked = new Property(6, boolean.class, "canChecked", false, "CAN_CHECKED");
        public final static Property IsChoosed = new Property(7, boolean.class, "isChoosed", false, "IS_CHOOSED");
    }


    public LocalResourceRecordDao(DaoConfig config) {
        super(config);
    }
    
    public LocalResourceRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCAL_RESOURCE_RECORD\" (" + //
                "\"RESOURCE_TYPE\" TEXT," + // 0: resourceType
                "\"RESOURCE_ID\" TEXT PRIMARY KEY NOT NULL ," + // 1: resourceId
                "\"RESOURCE_FILE_PATH\" TEXT," + // 2: resourceFilePath
                "\"RESOURCE_UPDATE_DATE\" TEXT," + // 3: resourceUpdateDate
                "\"IMAGE_URL\" TEXT," + // 4: imageUrl
                "\"RESOURCE_NAME\" TEXT," + // 5: resourceName
                "\"CAN_CHECKED\" INTEGER NOT NULL ," + // 6: canChecked
                "\"IS_CHOOSED\" INTEGER NOT NULL );"); // 7: isChoosed
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCAL_RESOURCE_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LocalResourceRecord entity) {
        stmt.clearBindings();
 
        String resourceType = entity.getResourceType();
        if (resourceType != null) {
            stmt.bindString(1, resourceType);
        }
 
        String resourceId = entity.getResourceId();
        if (resourceId != null) {
            stmt.bindString(2, resourceId);
        }
 
        String resourceFilePath = entity.getResourceFilePath();
        if (resourceFilePath != null) {
            stmt.bindString(3, resourceFilePath);
        }
 
        String resourceUpdateDate = entity.getResourceUpdateDate();
        if (resourceUpdateDate != null) {
            stmt.bindString(4, resourceUpdateDate);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(5, imageUrl);
        }
 
        String resourceName = entity.getResourceName();
        if (resourceName != null) {
            stmt.bindString(6, resourceName);
        }
        stmt.bindLong(7, entity.getCanChecked() ? 1L: 0L);
        stmt.bindLong(8, entity.getIsChoosed() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LocalResourceRecord entity) {
        stmt.clearBindings();
 
        String resourceType = entity.getResourceType();
        if (resourceType != null) {
            stmt.bindString(1, resourceType);
        }
 
        String resourceId = entity.getResourceId();
        if (resourceId != null) {
            stmt.bindString(2, resourceId);
        }
 
        String resourceFilePath = entity.getResourceFilePath();
        if (resourceFilePath != null) {
            stmt.bindString(3, resourceFilePath);
        }
 
        String resourceUpdateDate = entity.getResourceUpdateDate();
        if (resourceUpdateDate != null) {
            stmt.bindString(4, resourceUpdateDate);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(5, imageUrl);
        }
 
        String resourceName = entity.getResourceName();
        if (resourceName != null) {
            stmt.bindString(6, resourceName);
        }
        stmt.bindLong(7, entity.getCanChecked() ? 1L: 0L);
        stmt.bindLong(8, entity.getIsChoosed() ? 1L: 0L);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    @Override
    public LocalResourceRecord readEntity(Cursor cursor, int offset) {
        LocalResourceRecord entity = new LocalResourceRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // resourceType
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // resourceId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // resourceFilePath
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // resourceUpdateDate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // imageUrl
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // resourceName
            cursor.getShort(offset + 6) != 0, // canChecked
            cursor.getShort(offset + 7) != 0 // isChoosed
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LocalResourceRecord entity, int offset) {
        entity.setResourceType(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setResourceId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setResourceFilePath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setResourceUpdateDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImageUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setResourceName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCanChecked(cursor.getShort(offset + 6) != 0);
        entity.setIsChoosed(cursor.getShort(offset + 7) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(LocalResourceRecord entity, long rowId) {
        return entity.getResourceId();
    }
    
    @Override
    public String getKey(LocalResourceRecord entity) {
        if(entity != null) {
            return entity.getResourceId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LocalResourceRecord entity) {
        return entity.getResourceId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
