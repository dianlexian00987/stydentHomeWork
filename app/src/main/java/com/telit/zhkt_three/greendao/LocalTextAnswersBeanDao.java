package com.telit.zhkt_three.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.telit.zhkt_three.JavaBean.HomeWorkAnswerSave.AnswerItemListConverter;
import com.telit.zhkt_three.JavaBean.HomeWorkAnswerSave.StringListConverter;
import java.util.List;

import com.telit.zhkt_three.JavaBean.HomeWorkAnswerSave.LocalTextAnswersBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCAL_TEXT_ANSWERS_BEAN".
*/
public class LocalTextAnswersBeanDao extends AbstractDao<LocalTextAnswersBean, String> {

    public static final String TABLENAME = "LOCAL_TEXT_ANSWERS_BEAN";

    /**
     * Properties of entity LocalTextAnswersBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserId = new Property(0, String.class, "userId", false, "USER_ID");
        public final static Property HomeworkId = new Property(1, String.class, "homeworkId", false, "HOMEWORK_ID");
        public final static Property QuestionId = new Property(2, String.class, "questionId", true, "QUESTION_ID");
        public final static Property QuestionType = new Property(3, int.class, "questionType", false, "QUESTION_TYPE");
        public final static Property AnswerContent = new Property(4, String.class, "answerContent", false, "ANSWER_CONTENT");
        public final static Property Answer = new Property(5, String.class, "answer", false, "ANSWER");
        public final static Property Answers = new Property(6, String.class, "answers", false, "ANSWERS");
        public final static Property List = new Property(7, String.class, "list", false, "LIST");
        public final static Property ImageList = new Property(8, String.class, "imageList", false, "IMAGE_LIST");
    }

    private final StringListConverter answersConverter = new StringListConverter();
    private final AnswerItemListConverter listConverter = new AnswerItemListConverter();
    private final StringListConverter imageListConverter = new StringListConverter();

    public LocalTextAnswersBeanDao(DaoConfig config) {
        super(config);
    }
    
    public LocalTextAnswersBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCAL_TEXT_ANSWERS_BEAN\" (" + //
                "\"USER_ID\" TEXT," + // 0: userId
                "\"HOMEWORK_ID\" TEXT," + // 1: homeworkId
                "\"QUESTION_ID\" TEXT PRIMARY KEY NOT NULL ," + // 2: questionId
                "\"QUESTION_TYPE\" INTEGER NOT NULL ," + // 3: questionType
                "\"ANSWER_CONTENT\" TEXT," + // 4: answerContent
                "\"ANSWER\" TEXT," + // 5: answer
                "\"ANSWERS\" TEXT," + // 6: answers
                "\"LIST\" TEXT," + // 7: list
                "\"IMAGE_LIST\" TEXT);"); // 8: imageList
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCAL_TEXT_ANSWERS_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LocalTextAnswersBean entity) {
        stmt.clearBindings();
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(1, userId);
        }
 
        String homeworkId = entity.getHomeworkId();
        if (homeworkId != null) {
            stmt.bindString(2, homeworkId);
        }
 
        String questionId = entity.getQuestionId();
        if (questionId != null) {
            stmt.bindString(3, questionId);
        }
        stmt.bindLong(4, entity.getQuestionType());
 
        String answerContent = entity.getAnswerContent();
        if (answerContent != null) {
            stmt.bindString(5, answerContent);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(6, answer);
        }
 
        List answers = entity.getAnswers();
        if (answers != null) {
            stmt.bindString(7, answersConverter.convertToDatabaseValue(answers));
        }
 
        List list = entity.getList();
        if (list != null) {
            stmt.bindString(8, listConverter.convertToDatabaseValue(list));
        }
 
        List imageList = entity.getImageList();
        if (imageList != null) {
            stmt.bindString(9, imageListConverter.convertToDatabaseValue(imageList));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LocalTextAnswersBean entity) {
        stmt.clearBindings();
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(1, userId);
        }
 
        String homeworkId = entity.getHomeworkId();
        if (homeworkId != null) {
            stmt.bindString(2, homeworkId);
        }
 
        String questionId = entity.getQuestionId();
        if (questionId != null) {
            stmt.bindString(3, questionId);
        }
        stmt.bindLong(4, entity.getQuestionType());
 
        String answerContent = entity.getAnswerContent();
        if (answerContent != null) {
            stmt.bindString(5, answerContent);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(6, answer);
        }
 
        List answers = entity.getAnswers();
        if (answers != null) {
            stmt.bindString(7, answersConverter.convertToDatabaseValue(answers));
        }
 
        List list = entity.getList();
        if (list != null) {
            stmt.bindString(8, listConverter.convertToDatabaseValue(list));
        }
 
        List imageList = entity.getImageList();
        if (imageList != null) {
            stmt.bindString(9, imageListConverter.convertToDatabaseValue(imageList));
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2);
    }    

    @Override
    public LocalTextAnswersBean readEntity(Cursor cursor, int offset) {
        LocalTextAnswersBean entity = new LocalTextAnswersBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // userId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // homeworkId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // questionId
            cursor.getInt(offset + 3), // questionType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // answerContent
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // answer
            cursor.isNull(offset + 6) ? null : answersConverter.convertToEntityProperty(cursor.getString(offset + 6)), // answers
            cursor.isNull(offset + 7) ? null : listConverter.convertToEntityProperty(cursor.getString(offset + 7)), // list
            cursor.isNull(offset + 8) ? null : imageListConverter.convertToEntityProperty(cursor.getString(offset + 8)) // imageList
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LocalTextAnswersBean entity, int offset) {
        entity.setUserId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setHomeworkId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setQuestionId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setQuestionType(cursor.getInt(offset + 3));
        entity.setAnswerContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAnswer(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAnswers(cursor.isNull(offset + 6) ? null : answersConverter.convertToEntityProperty(cursor.getString(offset + 6)));
        entity.setList(cursor.isNull(offset + 7) ? null : listConverter.convertToEntityProperty(cursor.getString(offset + 7)));
        entity.setImageList(cursor.isNull(offset + 8) ? null : imageListConverter.convertToEntityProperty(cursor.getString(offset + 8)));
     }
    
    @Override
    protected final String updateKeyAfterInsert(LocalTextAnswersBean entity, long rowId) {
        return entity.getQuestionId();
    }
    
    @Override
    public String getKey(LocalTextAnswersBean entity) {
        if(entity != null) {
            return entity.getQuestionId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LocalTextAnswersBean entity) {
        return entity.getQuestionId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
