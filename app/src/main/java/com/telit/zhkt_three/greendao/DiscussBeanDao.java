package com.telit.zhkt_three.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.telit.zhkt_three.JavaBean.InterActive.DiscussBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DISCUSS_BEAN".
*/
public class DiscussBeanDao extends AbstractDao<DiscussBean, Long> {

    public static final String TABLENAME = "DISCUSS_BEAN";

    /**
     * Properties of entity DiscussBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DiscussId = new Property(1, String.class, "discussId", false, "DISCUSS_ID");
        public final static Property StudentName = new Property(2, String.class, "studentName", false, "STUDENT_NAME");
        public final static Property StudentId = new Property(3, String.class, "studentId", false, "STUDENT_ID");
        public final static Property Time = new Property(4, long.class, "time", false, "TIME");
        public final static Property Type = new Property(5, int.class, "type", false, "TYPE");
        public final static Property Content = new Property(6, String.class, "content", false, "CONTENT");
        public final static Property Thumbnail = new Property(7, String.class, "thumbnail", false, "THUMBNAIL");
        public final static Property Photo = new Property(8, String.class, "photo", false, "PHOTO");
        public final static Property DiscussGroupId = new Property(9, String.class, "discussGroupId", false, "DISCUSS_GROUP_ID");
        public final static Property GroupIndex = new Property(10, String.class, "groupIndex", false, "GROUP_INDEX");
    }


    public DiscussBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DiscussBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DISCUSS_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DISCUSS_ID\" TEXT," + // 1: discussId
                "\"STUDENT_NAME\" TEXT," + // 2: studentName
                "\"STUDENT_ID\" TEXT," + // 3: studentId
                "\"TIME\" INTEGER NOT NULL ," + // 4: time
                "\"TYPE\" INTEGER NOT NULL ," + // 5: type
                "\"CONTENT\" TEXT," + // 6: content
                "\"THUMBNAIL\" TEXT," + // 7: thumbnail
                "\"PHOTO\" TEXT," + // 8: photo
                "\"DISCUSS_GROUP_ID\" TEXT," + // 9: discussGroupId
                "\"GROUP_INDEX\" TEXT);"); // 10: groupIndex
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DISCUSS_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DiscussBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String discussId = entity.getDiscussId();
        if (discussId != null) {
            stmt.bindString(2, discussId);
        }
 
        String studentName = entity.getStudentName();
        if (studentName != null) {
            stmt.bindString(3, studentName);
        }
 
        String studentId = entity.getStudentId();
        if (studentId != null) {
            stmt.bindString(4, studentId);
        }
        stmt.bindLong(5, entity.getTime());
        stmt.bindLong(6, entity.getType());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(7, content);
        }
 
        String thumbnail = entity.getThumbnail();
        if (thumbnail != null) {
            stmt.bindString(8, thumbnail);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(9, photo);
        }
 
        String discussGroupId = entity.getDiscussGroupId();
        if (discussGroupId != null) {
            stmt.bindString(10, discussGroupId);
        }
 
        String groupIndex = entity.getGroupIndex();
        if (groupIndex != null) {
            stmt.bindString(11, groupIndex);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DiscussBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String discussId = entity.getDiscussId();
        if (discussId != null) {
            stmt.bindString(2, discussId);
        }
 
        String studentName = entity.getStudentName();
        if (studentName != null) {
            stmt.bindString(3, studentName);
        }
 
        String studentId = entity.getStudentId();
        if (studentId != null) {
            stmt.bindString(4, studentId);
        }
        stmt.bindLong(5, entity.getTime());
        stmt.bindLong(6, entity.getType());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(7, content);
        }
 
        String thumbnail = entity.getThumbnail();
        if (thumbnail != null) {
            stmt.bindString(8, thumbnail);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(9, photo);
        }
 
        String discussGroupId = entity.getDiscussGroupId();
        if (discussGroupId != null) {
            stmt.bindString(10, discussGroupId);
        }
 
        String groupIndex = entity.getGroupIndex();
        if (groupIndex != null) {
            stmt.bindString(11, groupIndex);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DiscussBean readEntity(Cursor cursor, int offset) {
        DiscussBean entity = new DiscussBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // discussId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // studentName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // studentId
            cursor.getLong(offset + 4), // time
            cursor.getInt(offset + 5), // type
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // content
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // thumbnail
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // photo
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // discussGroupId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // groupIndex
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DiscussBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDiscussId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStudentName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStudentId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTime(cursor.getLong(offset + 4));
        entity.setType(cursor.getInt(offset + 5));
        entity.setContent(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setThumbnail(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPhoto(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDiscussGroupId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setGroupIndex(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DiscussBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DiscussBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DiscussBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
